{
  "id": 6610,
  "name": "Water Waves Shader",
  "fragment": "\n#define TAU 6.28318530718\n#define MAX_ITER 5\n\nprecision highp float;\nprecision highp int;\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// variables de entrada\nuniform float time;\nvec3 waterColor = vec3(0.0, 0.5, 1.0);\nvec3 farWaterColor = vec3(0.5686,0.6705,0.7607);\nvec3 wavesColor = vec3(1.0,1.0,1.0);\nfloat farDistance = 0.9;\nvec2 resolution = vec2(1.0,1.0);\nvec2 waveResolution = vec2(3.0,3.0);\nfloat repeat = 2.0;\nfloat brightness = 0.7;\nfloat speed = 0.1;\nfloat opacity = 0.9;\n\n// Example varyings passed from the vertex shader\nvarying vec2 vUv;\n\nvoid main() {\n    // difuminado radial ..........................................................................................\n    vec2 pos_ndc = 2.0 * vUv.xy / resolution.xy - 1.0;\n    float dist = length(pos_ndc);\n    vec3 backgroundColor = mix(waterColor, farWaterColor, smoothstep(0.0, farDistance, dist));\n    // ............................................................................................................\n    \n    // waves ........................................................................................................\n    vec2 uv = vUv * waveResolution;\n    vec2 p = mod(uv * TAU, TAU) - 250.0;\n    vec2 i = vec2(p);\n        \n    float c = 1.0;\n    float inten = 0.005;\n    \n    for ( int n = 0; n < MAX_ITER; n++ )  {\n        float t = speed * time * (1.0 - (3.0 / float(n + 1)));\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x)) * repeat;\n        c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n    }\n    \n    c /= float( MAX_ITER  );\n    c = 1.17 - pow( c, brightness );\n    \n    vec3 rgb = vec3( pow( abs( c ), 8.0 ) );\n    // ..............................................................................................................\n    \n    //vec3 backColorWater = vec3( rgb * color + backgroundColor);\n    vec3 color = vec3(rgb * wavesColor + backgroundColor);\n    gl_FragColor = vec4( color, opacity);\n\n}",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n//uniform mat4 viewMatrix;\n//uniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\n//uniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\n//attribute vec3 normal;\nattribute vec2 uv;\n//attribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\n//varying vec3 vPosition;\n//varying vec3 vNormal;\nvarying vec2 vUv;\n//varying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    //vNormal = normal;\n    vUv = uv;\n    //vUv2 = uv2;\n    //vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "time": {
      "name": "time",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/6610",
  "user": {
    "username": "Alex250893Edu",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}