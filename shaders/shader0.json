{
  "id": 6445,
  "name": "Water Shader",
  "fragment": "#define PI 3.14159265\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Glowing_Circle_Configurable_1669621640597_123_resolution;\nuniform float radius;\nuniform vec3 Glowing_Circle_Configurable_1669621640597_123_color;\nuniform float glow;\nuniform float time;\nuniform vec3 Caustic_Improved1669621761124_298_color;\nuniform vec2 uvScale;\nuniform float brightness;\nuniform float Caustic_Improved1669621761124_298_speed;\nuniform float Veins_Floaters1669621811445_311_speed;\nuniform vec3 veinColor;\nuniform float veinBrightness;\nuniform vec3 Veins_Floaters1669621811445_311_color;\nuniform vec2 Veins_Floaters1669621811445_311_resolution;\nuniform sampler2D randomTexture;\nvarying vec2 Glowing_Circle_Configurable_1669621640597_123_vUv;\nvarying vec3 Caustic_Improved1669621761124_298_vNormal;\nvarying vec2 Caustic_Improved1669621761124_298_vUv;\nvec3 mod289(vec3 x) \n                                {\n                                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                }\nvec4 mod289(vec4 x) \n                                {\n                                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                }\nvec4 permute(vec4 x) \n                                {\n                                    return mod289(((x * 34.0) + 1.0) * x);\n                                }\nvec4 taylorInvSqrt(vec4 r) \n                                {\n                                    return 1.79284291400159 - 0.85373472095314 * r;\n                                }\nvec3 fade(vec3 t) \n                                {\n                                    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n                                }\nfloat cnoise(vec3 P) \n                                {\n                                    vec3 Pi0 = floor(P);\n                                    vec3 Pi1 = Pi0 + vec3(1.0);\n                                    Pi0 = mod289(Pi0);\n                                    Pi1 = mod289(Pi1);\n                                    vec3 Pf0 = fract(P);\n                                    vec3 Pf1 = Pf0 - vec3(1.0);\n                                    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                                    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                                    vec4 iz0 = Pi0.zzzz;\n                                    vec4 iz1 = Pi1.zzzz;\n                                    vec4 ixy = permute(permute(ix) + iy);\n                                    vec4 ixy0 = permute(ixy + iz0);\n                                    vec4 ixy1 = permute(ixy + iz1);\n                                    vec4 gx0 = ixy0 * (1.0 / 7.0);\n                                    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                                    gx0 = fract(gx0);\n                                    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                                    vec4 sz0 = step(gz0, vec4(0.0));\n                                    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                                    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n                                    vec4 gx1 = ixy1 * (1.0 / 7.0);\n                                    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                                    gx1 = fract(gx1);\n                                    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                                    vec4 sz1 = step(gz1, vec4(0.0));\n                                    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                                    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n                                    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n                                    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n                                    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n                                    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n                                    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n                                    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n                                    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n                                    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n                                    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                                    g000 *= norm0.x;\n                                    g010 *= norm0.y;\n                                    g100 *= norm0.z;\n                                    g110 *= norm0.w;\n                                    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g011, g011)));\n                                    g001 *= norm1.x;\n                                    g011 *= norm1.y;\n                                    g101 *= norm1.z;\n                                    g111 *= norm1.w;\n                                    float n000 = dot(g000, Pf0);\n                                    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                                    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                                    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                                    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                                    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                                    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                                    float n111 = dot(g111, Pf1);\n                                    vec3 fade_xyz = fade(Pf0);\n                                    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                                    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                                    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                                    return 2.2 * n_xyz;\n                                }\nfloat surface3(vec3 coord) \n                                {\n                                    float frequency = 7.0;\n                                    float n = 0.4;\n                                    n -= 1.0 * abs(cnoise(coord * frequency));\n                                    n -= 1.5 * abs(cnoise(coord * frequency * 4.0));\n                                    n -= 1.25 * abs(cnoise(coord * frequency * 4.0));\n                                    return clamp(n, -0.6, 1.0);\n                                }\nvarying vec2 Veins_Floaters1669621811445_311_vUv;\nvec3 saturate(vec3 i) \n                                {\n                                    return clamp(i, 0.0, 1.0);\n                                }\nfloat saturate(float i) \n                                {\n                                    return clamp(i, 0.0, 1.0);\n                                }\nvec4 texture2DNearest(sampler2D _tex, vec2 _uv, vec2 _reso) \n                                {\n                                    return texture2D(_tex, (floor(_uv * _reso) + 0.5) / _reso);\n                                }\nfloat expCurve(float _in, float _lv) \n                                {\n                                    return sign(0.5 - _in) * (exp(-abs(_in - 0.5) * _lv) - 1.0) * 0.5 + 0.5;\n                                }\nvec4 noise(vec2 _uv, vec2 _mul, vec2 _off, float _iter, float _lacu) \n                                {\n                                    vec4 sum = vec4(0.0);\n                                    for (float i = 0.0;\n i < 99.0; i += 1.0) \n                                    {\n                                        vec2 uv0 = ((_uv) * _mul + _off) * 0.01 * exp(i * _lacu) + time * Veins_Floaters1669621811445_311_speed * i * 0.01;\n                                        vec2 uv1 = ((_uv + vec2(1.0, 0.0)) * _mul + _off) * 0.01 * exp(i * _lacu) + time * Veins_Floaters1669621811445_311_speed * i * 0.01;\n                                        vec4 tex0 = texture2D(randomTexture, uv0);\n                                        vec4 tex1 = texture2D(randomTexture, uv1);\n                                        vec4 tex = mix(tex1, tex0, expCurve(_uv.x, 10.0));\n                                        sum += tex / pow(2.0, i + 1.0);\n                                        if (_iter < i) \n                                        {\n                                            break;\n                                        }\n                                     }\n                                    return sum;\n                                }\nvec4 Glowing_Circle_Configurable_1669621640597_123_main() \n                                {\n                                    vec4 Glowing_Circle_Configurable_1669621640597_123_gl_FragColor = vec4(0.0);\n                                    vec2 uv = (Glowing_Circle_Configurable_1669621640597_123_vUv - 0.5) * Glowing_Circle_Configurable_1669621640597_123_resolution;\n                                    float strength = dot(uv, uv);\n                                    vec2 weight = vec2(radius * radius + radius * glow, radius * radius - radius * glow);\n                                    float clamped = 1.0 - clamp((strength - weight.y) / (weight.x - weight.y), 0.0, 1.0);\n                                    Glowing_Circle_Configurable_1669621640597_123_gl_FragColor = vec4(Glowing_Circle_Configurable_1669621640597_123_color * clamped, 1.0);\n                                    return Glowing_Circle_Configurable_1669621640597_123_gl_FragColor *= 1.0;\n                                }\nvec4 Caustic_Improved1669621761124_298_main(void) \n                                {\n                                    vec4 Caustic_Improved1669621761124_298_gl_FragColor = vec4(0.0);\n                                    vec2 uvMax = (2.0 * asin(sin(2.0 * PI * Caustic_Improved1669621761124_298_vUv))) / PI;\n                                    float n = surface3(vec3(uvMax * uvScale, time * Caustic_Improved1669621761124_298_speed));\n                                    vec3 s = vec3(clamp(n, 0.0, 1.0)) * Caustic_Improved1669621761124_298_color * brightness;\n                                    Caustic_Improved1669621761124_298_gl_FragColor = vec4(s, 1.0);\n                                    return Caustic_Improved1669621761124_298_gl_FragColor *= 1.0;\n                                }\nvec4 Veins_Floaters1669621811445_311_main() \n                                {\n                                    vec4 Veins_Floaters1669621811445_311_gl_FragColor = vec4(0.0);\n                                    vec2 uv = mod(Veins_Floaters1669621811445_311_vUv.xy / Veins_Floaters1669621811445_311_resolution, 1.0);\n                                    uv = mod(uv + vec2(0.5, 0.0), 1.0);\n                                    vec3 col1 = vec3(0.0);\n                                    float line = 0.0;\n                                    for (float i = 0.0;\n i < 8.5; i += 1.0) \n                                    {\n                                        vec2 mul = vec2(exp(i * 0.3));\n                                        vec2 off = vec2(i * 423.1);\n                                        float lineL = 1.0 - abs(noise(uv, mul * vec2(2.0, 1.5), off, 2.0, 0.4).x - 0.5) * 2.0;\n                                        float lineS = 1.0 - abs(noise(uv, mul * vec2(14.0), off + 10.0, 6.0, 0.7).x - 0.5) * 2.0;\n                                        float lineT = expCurve(pow(lineL, 200.0), 7.0) * 1.0;\n                                        lineT += pow(lineL, 12.0) * expCurve(pow(lineS, 40.0), 10.0) * 1.0;\n                                        lineT = saturate(lineT);\n                                        lineT *= expCurve(noise(uv, mul * 7.0, off + 20.0, 6.0, 1.0).x * 0.88, 20.0);\n                                        line += lineT * exp(-i * 0.1);\n                                    }\n                                    line = saturate(line);\n                                    col1 = vec3(0.5) * Veins_Floaters1669621811445_311_color;\n                                    col1 = mix(col1, Veins_Floaters1669621811445_311_color * 0.8, expCurve(noise(uv, vec2(4.0), vec2(40.0), 5.0, 0.7).x * 0.7, 14.0));\n                                    col1 = mix(col1, Veins_Floaters1669621811445_311_color * 0.8, expCurve(noise(uv, vec2(4.0), vec2(50.0), 5.0, 0.7).x * 0.7, 5.0) * 0.7);\n                                    col1 = mix(col1, veinColor * veinBrightness, line);\n                                    vec3 col = col1;\n                                    Veins_Floaters1669621811445_311_gl_FragColor = vec4(col, 1.0);\n                                    return Veins_Floaters1669621811445_311_gl_FragColor *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_FragColor = (Glowing_Circle_Configurable_1669621640597_123_main() + Caustic_Improved1669621761124_298_main() + Veins_Floaters1669621811445_311_main());                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Glowing_Circle_Configurable_1669621640597_123_vPosition;\nvarying vec3 Glowing_Circle_Configurable_1669621640597_123_vNormal;\nvarying vec2 Glowing_Circle_Configurable_1669621640597_123_vUv;\nvarying vec2 Glowing_Circle_Configurable_1669621640597_123_vUv2;\nvarying vec2 Caustic_Improved1669621761124_298_vUv;\nvarying vec3 Caustic_Improved1669621761124_298_vNormal;\nvarying vec3 Veins_Floaters1669621811445_311_vPosition;\nvarying vec3 Veins_Floaters1669621811445_311_vNormal;\nvarying vec2 Veins_Floaters1669621811445_311_vUv;\nvarying vec2 Veins_Floaters1669621811445_311_vUv2;\nvec4 Glowing_Circle_Configurable_1669621640597_123_main() \n                                {\n                                    vec4 Glowing_Circle_Configurable_1669621640597_123_gl_Position = vec4(0.0);\n                                    Glowing_Circle_Configurable_1669621640597_123_vNormal = normal;\n                                    Glowing_Circle_Configurable_1669621640597_123_vUv = uv;\n                                    Glowing_Circle_Configurable_1669621640597_123_vUv2 = uv2;\n                                    Glowing_Circle_Configurable_1669621640597_123_vPosition = position;\n                                    Glowing_Circle_Configurable_1669621640597_123_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Glowing_Circle_Configurable_1669621640597_123_gl_Position *= 1.0;\n                                }\nvec4 Caustic_Improved1669621761124_298_main() \n                                {\n                                    vec4 Caustic_Improved1669621761124_298_gl_Position = vec4(0.0);\n                                    Caustic_Improved1669621761124_298_vNormal = position * normal;\n                                    Caustic_Improved1669621761124_298_vUv = uv;\n                                    Caustic_Improved1669621761124_298_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Caustic_Improved1669621761124_298_gl_Position *= 1.0;\n                                }\nvec4 Veins_Floaters1669621811445_311_main() \n                                {\n                                    vec4 Veins_Floaters1669621811445_311_gl_Position = vec4(0.0);\n                                    Veins_Floaters1669621811445_311_vNormal = normal;\n                                    Veins_Floaters1669621811445_311_vUv = uv;\n                                    Veins_Floaters1669621811445_311_vUv2 = uv2;\n                                    Veins_Floaters1669621811445_311_vPosition = position;\n                                    Veins_Floaters1669621811445_311_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Veins_Floaters1669621811445_311_gl_Position *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_Position = Glowing_Circle_Configurable_1669621640597_123_main() + Caustic_Improved1669621761124_298_main() + Veins_Floaters1669621811445_311_main();                                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "glow": {
      "value": "0.14833916",
      "type": "f",
      "glslType": "float"
    },
    "radius": {
      "value": "0.33147563",
      "type": "f",
      "glslType": "float"
    },
    "Glowing_Circle_Configurable_1669621640597_123_color": {
      "value": {
        "r": 0,
        "g": 0.5058823529411764,
        "b": 0.8196078431372549
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Glowing_Circle_Configurable_1669621640597_123_resolution": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "brightness": {
      "value": "22",
      "type": "f",
      "glslType": "float"
    },
    "uvScale": {
      "value": {
        "x": "0.3525",
        "y": "0.3"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Caustic_Improved1669621761124_298_color": {
      "value": {
        "r": 0.054901960784313725,
        "g": 0.3803921568627451,
        "b": 0.803921568627451
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Caustic_Improved1669621761124_298_speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    },
    "veinColor": {
      "value": {
        "r": 0.44313725490196076,
        "g": 0.7176470588235294,
        "b": 0.7137254901960784
      },
      "type": "c",
      "glslType": "vec3"
    },
    "randomTexture": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "veinBrightness": {
      "value": "1.5",
      "type": "f",
      "glslType": "float"
    },
    "Veins_Floaters1669621811445_311_speed": {
      "value": "0.05",
      "type": "f",
      "glslType": "float"
    },
    "Veins_Floaters1669621811445_311_color": {
      "value": {
        "r": 0.13333333333333333,
        "g": 0.27058823529411763,
        "b": 0.34901960784313724
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Veins_Floaters1669621811445_311_resolution": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    }
  },
  "url": "http://shaderfrog.com/app/view/6445",
  "user": {
    "username": "maoahaa",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}