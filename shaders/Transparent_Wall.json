{
  "id": 1849,
  "name": "Transparent Wall",
  "fragment": "#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform float edgeWidth;\nuniform float sharpness;\nuniform float antSize;\nuniform float antSpeed;\nuniform float time;\nuniform vec3 color;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float scale;\nuniform float height;\nvarying vec2 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_vUv;\nvarying vec2 Circular_Gradient1504661723893_42_vUv;\nvarying vec3 vPosition;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_main() \n                                {\n                                    vec4 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_FragColor = vec4(0.0);\n                                    vec2 borderUv = abs((Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_vUv - 0.5) * 2.0);\n                                    float leftRight = clamp((borderUv.x - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n                                    float upDown = clamp((borderUv.y - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n                                    vec2 antUv = Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_vUv * antSize;\n                                    float antOffset = time * antSpeed;\n                                    if (mod(floor(antUv.x + antOffset), 2.0) != 1.0) \n                                    {\n                                        upDown = 0.0;\n                                    }\n                                     if (mod(floor(antUv.y + antOffset), 2.0) != 1.0) \n                                    {\n                                        leftRight = 0.0;\n                                    }\n                                     float alpha = clamp(leftRight + upDown, 0.0, 1.0);\n                                    Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_FragColor = vec4(color * alpha, alpha);\n                                    return Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_FragColor *= 0.9;\n                                }\nvec4 Circular_Gradient1504661723893_42_main() \n                                {\n                                    vec4 Circular_Gradient1504661723893_42_gl_FragColor = vec4(0.0);\n                                    vec2 uv = Circular_Gradient1504661723893_42_vUv - 0.5;\n                                    vec3 gradient = mix(color1, color2, length(uv) * scale);\n                                    Circular_Gradient1504661723893_42_gl_FragColor = vec4(gradient, 1.0);\n                                    return Circular_Gradient1504661723893_42_gl_FragColor *= 0.3;\n                                }\nvec4 Gradient_Based_on_Height1505026207895_107_main() \n                                {\n                                    vec4 Gradient_Based_on_Height1505026207895_107_gl_FragColor = vec4(0.0);\n                                    float howFarUp = clamp(1.0 - (vPosition.y + (height / 2.0)) / height, 0.0, 1.0);\n                                    Gradient_Based_on_Height1505026207895_107_gl_FragColor = vec4(vec3(howFarUp), 1.0);\n                                    return Gradient_Based_on_Height1505026207895_107_gl_FragColor *= 0.3;\n                                }\nvoid main() \n                                {\n                                    gl_FragColor = (Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_main() + Circular_Gradient1504661723893_42_main() + Gradient_Based_on_Height1505026207895_107_main());                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_vUv;\nvarying vec2 Circular_Gradient1504661723893_42_vUv;\nvarying vec3 vPosition;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_main() \n                                {\n                                    vec4 Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_Position = vec4(0.0);\n                                    Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_vUv = uv;\n                                    Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_gl_Position *= 0.9;\n                                }\nvec4 Circular_Gradient1504661723893_42_main() \n                                {\n                                    vec4 Circular_Gradient1504661723893_42_gl_Position = vec4(0.0);\n                                    Circular_Gradient1504661723893_42_vUv = uv;\n                                    Circular_Gradient1504661723893_42_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Circular_Gradient1504661723893_42_gl_Position *= 0.3;\n                                }\nvec4 Gradient_Based_on_Height1505026207895_107_main() \n                                {\n                                    vec4 Gradient_Based_on_Height1505026207895_107_gl_Position = vec4(0.0);\n                                    vPosition = position;\n                                    Gradient_Based_on_Height1505026207895_107_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Gradient_Based_on_Height1505026207895_107_gl_Position *= 0.3;\n                                }\nvoid main() \n                                {\n                                    gl_Position = Marching_Ants_UV_Based_Border_Edge_Outline1504661713141_23_main() + Circular_Gradient1504661723893_42_main() + Gradient_Based_on_Height1505026207895_107_main();                                }\n",
  "uniforms": {
    "color": {
      "value": {
        "r": 0.4117647058823529,
        "g": 1,
        "b": 0.7490196078431373
      },
      "type": "c",
      "glslType": "vec3"
    },
    "edgeWidth": {
      "value": "0.1",
      "type": "f",
      "glslType": "float"
    },
    "sharpness": {
      "value": "100",
      "type": "f",
      "glslType": "float"
    },
    "antSize": {
      "value": "10",
      "type": "f",
      "glslType": "float"
    },
    "antSpeed": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color1": {
      "value": {
        "r": 0.21176470588235294,
        "g": 1,
        "b": 0.3176470588235294
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color2": {
      "value": {
        "r": "0",
        "g": "0",
        "b": "0"
      },
      "type": "c",
      "glslType": "vec3"
    },
    "scale": {
      "value": "0.9119284",
      "type": "f",
      "glslType": "float"
    },
    "height": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/1849",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}