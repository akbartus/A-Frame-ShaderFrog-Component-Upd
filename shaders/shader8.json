{
  "id": 5257,
  "name": "Sky Shader",
  "fragment": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform vec3 color;\nuniform vec3 lightPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nconst float cloudscale = 1.1;\nconst float speed = 0.03;\nconst float clouddark = 0.5;\nconst float cloudlight = 0.3;\nconst float cloudcover = 0.2;\nconst float cloudalpha = 8.0;\nconst float skytint = 0.5;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\nconst mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\nvec2 hash(vec2 p) \n                                {\n                                    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n                                    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n                                }\nfloat noise(in vec2 p) \n                                {\n                                    const float K1 = 0.366025404;\n                                    const float K2 = 0.211324865;\n                                    vec2 i = floor(p + (p.x + p.y) * K1);\n                                    vec2 a = p - i + (i.x + i.y) * K2;\n                                    vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n                                    vec2 b = a - o + K2;\n                                    vec2 c = a - 1.0 + 2.0 * K2;\n                                    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n                                    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n                                    return dot(n, vec3(70.0));\n                                }\nfloat fbm(vec2 n) \n                                {\n                                    float total = 0.0, amplitude = 0.1;\n                                    for (int i = 0;\n i < 7; i++) \n                                    {\n                                        total += noise(n) * amplitude;\n                                        n = m * n;\n                                        amplitude *= 0.4;\n                                    }\n                                    return total;\n                                }\nvec4 New_Basic_Shader1621559815706_183_main() \n                                {\n                                    vec4 New_Basic_Shader1621559815706_183_gl_FragColor = vec4(0.0);\n                                    vec2 p = vUv;\n                                    vec2 uv = p * vec2(1920.0 / 969.0, 1.0);\n                                    float time1 = time * speed;\n                                    float q = fbm(uv * cloudscale * 0.5);\n                                    float r = 0.0;\n                                    uv *= cloudscale;\n                                    uv -= q - time1;\n                                    float weight = 0.8;\n                                    for (int i = 0;\n i < 8; i++) \n                                    {\n                                        r += abs(weight * noise(uv));\n                                        uv = m * uv + time1;\n                                        weight *= 0.7;\n                                    }\n                                    float f = 0.0;\n                                    uv = p * vec2(1920.0 / 969.0, 1.0);\n                                    uv *= cloudscale;\n                                    uv -= q - time1;\n                                    weight = 0.7;\n                                    for (int i = 0;\n i < 8; i++) \n                                    {\n                                        f += weight * noise(uv);\n                                        uv = m * uv + time1;\n                                        weight *= 0.6;\n                                    }\n                                    f *= r + f;\n                                    float c = 0.0;\n                                    time1 = time * speed * 2.0;\n                                    uv = p * vec2(1920.0 / 969.0, 1.0);\n                                    uv *= cloudscale * 2.0;\n                                    uv -= q - time1;\n                                    weight = 0.4;\n                                    for (int i = 0;\n i < 7; i++) \n                                    {\n                                        c += weight * noise(uv);\n                                        uv = m * uv + time1;\n                                        weight *= 0.6;\n                                    }\n                                    float c1 = 0.0;\n                                    time1 = time * speed * 3.0;\n                                    uv = p * vec2(1920.0 / 969.0, 1.0);\n                                    uv *= cloudscale * 3.0;\n                                    uv -= q - time1;\n                                    weight = 0.4;\n                                    for (int i = 0;\n i < 7; i++) \n                                    {\n                                        c1 += abs(weight * noise(uv));\n                                        uv = m * uv + time1;\n                                        weight *= 0.6;\n                                    }\n                                    c += c1;\n                                    vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n                                    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight * c), 0.0, 1.0);\n                                    f = cloudcover + cloudalpha * f * r;\n                                    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n                                    New_Basic_Shader1621559815706_183_gl_FragColor = vec4(result, 1.0);\n                                    return New_Basic_Shader1621559815706_183_gl_FragColor *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_FragColor = New_Basic_Shader1621559815706_183_main();                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 New_Basic_Shader1621559815706_183_main() \n                                {\n                                    vec4 New_Basic_Shader1621559815706_183_gl_Position = vec4(0.0);\n                                    vNormal = normal;\n                                    vUv = uv;\n                                    vUv2 = uv2;\n                                    vPosition = position;\n                                    New_Basic_Shader1621559815706_183_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return New_Basic_Shader1621559815706_183_gl_Position *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_Position = New_Basic_Shader1621559815706_183_main();                                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0.6823529411764706,
        "g": 0.8862745098039215,
        "b": 0.2235294117647059
      },
      "type": "c",
      "glslType": "vec3"
    },
    "lightPosition": {
      "value": {
        "x": 0,
        "y": 1.25,
        "z": 1.25
      },
      "type": "v3",
      "glslType": "vec3"
    }
  },
  "url": "http://shaderfrog.com/app/view/5257",
  "user": {
    "username": "linzhang",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}