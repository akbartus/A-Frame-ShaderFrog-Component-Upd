{
  "id": 6270,
  "name": "Fire Shader",
  "fragment": "#define OCTAVES 2\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform sampler2D tExplosion;\nuniform float Fireball1666777975210_444_brightness;\nuniform float time;\nuniform float Surface_of_The_Sun1666778376601_456_brightness;\nuniform float sunSpots;\nuniform vec3 color;\nuniform vec2 speed;\nuniform vec2 resolution;\nvarying float Fireball1666777975210_444_noise;\nvarying vec2 vUv;\nfloat rand(vec2 n) \n                                {\n                                    return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);\n                                }\nfloat Surface_of_The_Sun1666778376601_456_noise(vec2 n) \n                                {\n                                    const vec2 d = vec2(0.0, 1.0);\n                                    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n                                    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n                                }\nfloat fbm(vec2 n) \n                                {\n                                    float total = 0.0;\n                                    float amplitude = 2.0;\n                                    for (int i = 0;\n i < OCTAVES; i++) \n                                    {\n                                        total += Surface_of_The_Sun1666778376601_456_noise(n) * amplitude;\n                                        n += n;\n                                        amplitude *= 0.3;\n                                    }\n                                    return total;\n                                }\nvec3 tex(vec2 pos) \n                                {\n                                    vec3 c1 = (1.0 - sunSpots) * vec3(3.1, 0.0, 0.0);\n                                    vec3 c2 = vec3(c1);\n                                    vec3 c3 = vec3(c1);\n                                    vec3 c4 = vec3(3.0, 0.9, 0.0) * color;\n                                    vec3 c5 = vec3(c3);\n                                    vec3 c6 = vec3(c1);\n                                    vec2 p = pos;\n                                    float q = fbm(p + time * speed);\n                                    vec2 r = vec2(fbm(p + q + (time * speed.x) - p.x - p.y), fbm(p + p + (time * speed.y)));\n                                    vec3 c = color * (mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y));\n                                    return c;\n                                }\nvec4 Fireball1666777975210_444_main() \n                                {\n                                    vec4 Fireball1666777975210_444_gl_FragColor = vec4(0.0);\n                                    float offset = .02;\n                                    float depth = 0.22;\n                                    vec2 tPos = vec2(0, (Fireball1666777975210_444_brightness + depth) * Fireball1666777975210_444_noise + offset);\n                                    vec4 color = texture2D(tExplosion, (Fireball1666777975210_444_brightness - depth) - tPos);\n                                    Fireball1666777975210_444_gl_FragColor = vec4(color.rgb, 1.0);\n                                    return Fireball1666777975210_444_gl_FragColor *= 1.0;\n                                }\nvec4 Surface_of_The_Sun1666778376601_456_main() \n                                {\n                                    vec4 Surface_of_The_Sun1666778376601_456_gl_FragColor = vec4(0.0);\n                                    vec2 p = (vUv - 0.5) * resolution;\n                                    vec3 col = tex(p);\n                                    Surface_of_The_Sun1666778376601_456_gl_FragColor = vec4(col * Surface_of_The_Sun1666778376601_456_brightness, 1.0);\n                                    return Surface_of_The_Sun1666778376601_456_gl_FragColor *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_FragColor = (Fireball1666777975210_444_main() + Surface_of_The_Sun1666778376601_456_main());                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform float time;\nuniform float fireSpeed;\nuniform float pulseHeight;\nuniform float displacementHeight;\nuniform float turbulenceDetail;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying float Fireball1666777975210_444_noise;\nvec3 mod289(vec3 x) \n                                {\n                                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                }\nvec4 mod289(vec4 x) \n                                {\n                                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                }\nvec4 permute(vec4 x) \n                                {\n                                    return mod289(((x * 34.0) + 1.0) * x);\n                                }\nvec4 taylorInvSqrt(vec4 r) \n                                {\n                                    return 1.79284291400159 - 0.85373472095314 * r;\n                                }\nvec3 fade(vec3 t) \n                                {\n                                    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n                                }\nfloat cnoise(vec3 P) \n                                {\n                                    vec3 Pi0 = floor(P);\n                                    vec3 Pi1 = Pi0 + vec3(1.0);\n                                    Pi0 = mod289(Pi0);\n                                    Pi1 = mod289(Pi1);\n                                    vec3 Pf0 = fract(P);\n                                    vec3 Pf1 = Pf0 - vec3(1.0);\n                                    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                                    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                                    vec4 iz0 = Pi0.zzzz;\n                                    vec4 iz1 = Pi1.zzzz;\n                                    vec4 ixy = permute(permute(ix) + iy);\n                                    vec4 ixy0 = permute(ixy + iz0);\n                                    vec4 ixy1 = permute(ixy + iz1);\n                                    vec4 gx0 = ixy0 * (1.0 / 7.0);\n                                    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                                    gx0 = fract(gx0);\n                                    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                                    vec4 sz0 = step(gz0, vec4(0.0));\n                                    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                                    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n                                    vec4 gx1 = ixy1 * (1.0 / 7.0);\n                                    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                                    gx1 = fract(gx1);\n                                    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                                    vec4 sz1 = step(gz1, vec4(0.0));\n                                    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                                    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n                                    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n                                    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n                                    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n                                    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n                                    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n                                    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n                                    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n                                    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n                                    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                                    g000 *= norm0.x;\n                                    g010 *= norm0.y;\n                                    g100 *= norm0.z;\n                                    g110 *= norm0.w;\n                                    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                                    g001 *= norm1.x;\n                                    g011 *= norm1.y;\n                                    g101 *= norm1.z;\n                                    g111 *= norm1.w;\n                                    float n000 = dot(g000, Pf0);\n                                    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                                    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                                    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                                    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                                    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                                    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                                    float n111 = dot(g111, Pf1);\n                                    vec3 fade_xyz = fade(Pf0);\n                                    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                                    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                                    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                                    return 2.2 * n_xyz;\n                                }\nfloat pnoise(vec3 P, vec3 rep) \n                                {\n                                    vec3 Pi0 = mod(floor(P), rep);\n                                    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);\n                                    Pi0 = mod289(Pi0);\n                                    Pi1 = mod289(Pi1);\n                                    vec3 Pf0 = fract(P);\n                                    vec3 Pf1 = Pf0 - vec3(1.0);\n                                    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                                    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                                    vec4 iz0 = Pi0.zzzz;\n                                    vec4 iz1 = Pi1.zzzz;\n                                    vec4 ixy = permute(permute(ix) + iy);\n                                    vec4 ixy0 = permute(ixy + iz0);\n                                    vec4 ixy1 = permute(ixy + iz1);\n                                    vec4 gx0 = ixy0 * (1.0 / 7.0);\n                                    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                                    gx0 = fract(gx0);\n                                    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                                    vec4 sz0 = step(gz0, vec4(0.0));\n                                    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                                    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n                                    vec4 gx1 = ixy1 * (1.0 / 7.0);\n                                    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                                    gx1 = fract(gx1);\n                                    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                                    vec4 sz1 = step(gz1, vec4(0.0));\n                                    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                                    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n                                    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n                                    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n                                    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n                                    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n                                    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n                                    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n                                    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n                                    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n                                    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                                    g000 *= norm0.x;\n                                    g010 *= norm0.y;\n                                    g100 *= norm0.z;\n                                    g110 *= norm0.w;\n                                    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                                    g001 *= norm1.x;\n                                    g011 *= norm1.y;\n                                    g101 *= norm1.z;\n                                    g111 *= norm1.w;\n                                    float n000 = dot(g000, Pf0);\n                                    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                                    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                                    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                                    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                                    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                                    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                                    float n111 = dot(g111, Pf1);\n                                    vec3 fade_xyz = fade(Pf0);\n                                    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                                    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                                    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                                    return 2.2 * n_xyz;\n                                }\nfloat turbulence(vec3 p) \n                                {\n                                    float t = -.5;\n                                    for (float f = 1.0;\n f <= 10.0; f++) \n                                    {\n                                        float power = pow(2.0, f);\n                                        t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n                                    }\n                                    return t;\n                                }\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Fireball1666777975210_444_main() \n                                {\n                                    vec4 Fireball1666777975210_444_gl_Position = vec4(0.0);\n                                    Fireball1666777975210_444_noise = -displacementHeight * turbulence(turbulenceDetail * normal + fireSpeed * time);\n                                    float b = pulseHeight * pnoise(0.05 * position + vec3(0.5 * time), vec3(100.0));\n                                    float displacement = -Fireball1666777975210_444_noise + b;\n                                    vec3 newPosition = position + normal * displacement;\n                                    Fireball1666777975210_444_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n                                    return Fireball1666777975210_444_gl_Position *= 1.0;\n                                }\nvec4 Surface_of_The_Sun1666778376601_456_main() \n                                {\n                                    vec4 Surface_of_The_Sun1666778376601_456_gl_Position = vec4(0.0);\n                                    vNormal = normal;\n                                    vUv = uv;\n                                    vUv2 = uv2;\n                                    vPosition = position;\n                                    Surface_of_The_Sun1666778376601_456_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                    return Surface_of_The_Sun1666778376601_456_gl_Position *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_Position = Fireball1666777975210_444_main() + Surface_of_The_Sun1666778376601_456_main();                                }\n",
  "uniforms": {
    "tExplosion": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "fireSpeed": {
      "value": "0.50101949",
      "type": "f",
      "glslType": "float"
    },
    "turbulenceDetail": {
      "value": "0.70545175",
      "type": "f",
      "glslType": "float"
    },
    "displacementHeight": {
      "value": "0.55147575",
      "type": "f",
      "glslType": "float"
    },
    "pulseHeight": {
      "value": "0.46779423",
      "type": "f",
      "glslType": "float"
    },
    "Fireball1666777975210_444_brightness": {
      "value": "0.84001571",
      "type": "f",
      "glslType": "float"
    },
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "resolution": {
      "value": {
        "x": "100",
        "y": "100"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "speed": {
      "value": {
        "x": 0.9230769230769231,
        "y": 0.9230769230769231
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "color": {
      "value": {
        "r": 1,
        "g": 0.5333333333333333,
        "b": 0
      },
      "type": "c",
      "glslType": "vec3"
    },
    "sunSpots": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Surface_of_The_Sun1666778376601_456_brightness": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/6270",
  "user": {
    "username": "chelseavanbreda",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}